// Viola√ß√£o do DIP: Classe de alto n√≠vel depende diretamente de implementa√ß√£o concreta
// UserService depende diretamente da classe EmailService (baixo n√≠vel)

// Servi√ßo de baixo n√≠vel - implementa√ß√£o concreta
class EmailService {
  constructor(
    private host: string,
    private port: number,
    private protocol: string,
    private user: string,
    private pass: string
  ) { }

  sendEmail(to: string, subject: string, body: string): void {
    console.log(`üìß Enviando email para ${to}`);
    console.log(`   Assunto: ${subject}`);
    console.log(`   Corpo: ${body}`);
  }
}

// Servi√ßo de alto n√≠vel - PROBLEMA: depende diretamente da implementa√ß√£o concreta
class UserService {
  private emailService: EmailService; // Depend√™ncia direta da classe concreta!

  constructor() {
    this.emailService = new EmailService(
      "smtp.example.com",
      587,
      "TLS",
      "user@example.com",
      "password"
    ); // Acoplamento forte!
  }

  registerUser(email: string, name: string): void {
    console.log(`\n‚úÖ Registrando usu√°rio: ${name} (${email})`);

    // L√≥gica de registro...
    console.log("   Salvando no banco de dados...");

    // Enviando notifica√ß√£o
    this.emailService.sendEmail(
      email,
      "Bem-vindo!",
      `Ol√° ${name}, seja bem-vindo!`
    );
  }
}

// Teste
const userService = new UserService();
userService.registerUser("joao@example.com", "Jo√£o Silva");

// PROBLEMAS:
// 1. Imposs√≠vel testar UserService sem enviar emails reais
// 2. Imposs√≠vel trocar EmailService por SMSService ou PushNotification
// 3. UserService est√° fortemente acoplado a EmailService
// 4. Mudan√ßas em EmailService podem quebrar UserService

console.log("\n‚ùå Problemas:");
console.log("- UserService depende diretamente de EmailService");
console.log("- Dif√≠cil de testar (n√£o podemos mockar EmailService facilmente)");
console.log("- Imposs√≠vel mudar para SMS ou Push Notification sem modificar UserService");
