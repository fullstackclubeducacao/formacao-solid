// Aplica√ß√£o do DIP: Ambos dependem de abstra√ß√µes (interfaces)
// UserService (alto n√≠vel) e implementa√ß√µes concretas (baixo n√≠vel) dependem da interface

// Abstra√ß√£o - o contrato que todos devem seguir
interface NotificationService {
  send(to: string, subject: string, message: string): void;
}

// Implementa√ß√µes concretas - dependem da abstra√ß√£o
class EmailServiceDIP implements NotificationService {
  constructor(
    private host: string,
    private port: number,
    private protocol: string,
    private user: string,
    private pass: string
  ) { }

  send(to: string, subject: string, message: string): void {
    console.log(`üìß Enviando email para ${to}`);
    console.log(`   Assunto: ${subject}`);
    console.log(`   Mensagem: ${message}`);
  }
}

class SMSService implements NotificationService {
  send(to: string, subject: string, message: string): void {
    console.log(`üì± Enviando SMS para ${to}`);
    console.log(`   ${subject}: ${message}`);
  }
}

class PushNotificationService implements NotificationService {
  send(to: string, subject: string, message: string): void {
    console.log(`üîî Enviando Push Notification para ${to}`);
    console.log(`   ${subject}: ${message}`);
  }
}

// Servi√ßo de alto n√≠vel - depende da abstra√ß√£o, n√£o da implementa√ß√£o
class UserServiceDIP {
  private notificationService: NotificationService; // Depend√™ncia da interface!

  constructor(notificationService: NotificationService) {
    this.notificationService = notificationService; // Inje√ß√£o de depend√™ncia!
  }

  registerUser(email: string, name: string): void {
    console.log(`\n‚úÖ Registrando usu√°rio: ${name} (${email})`);

    // L√≥gica de registro...
    console.log("   Salvando no banco de dados...");

    // Enviando notifica√ß√£o - n√£o sabe qual implementa√ß√£o est√° sendo usada!
    this.notificationService.send(
      email,
      "Bem-vindo!",
      `Ol√° ${name}, seja bem-vindo!`
    );
  }
}

// Mock para testes - implementa a mesma interface
class MockNotificationService implements NotificationService {
  public sentMessages: Array<{ to: string; subject: string; message: string }> =
    [];

  send(to: string, subject: string, message: string): void {
    console.log(`üß™ [MOCK] Notifica√ß√£o capturada (n√£o enviada)`);
    this.sentMessages.push({ to, subject, message });
  }
}

// Testes e demonstra√ß√£o
console.log("=== Usando Email ===");
const emailService = new EmailServiceDIP(
  "smtp.example.com",
  587,
  "TLS",
  "user@example.com",
  "password"
);
const userServiceWithEmail = new UserServiceDIP(emailService);
userServiceWithEmail.registerUser("joao@example.com", "Jo√£o Silva");

console.log("\n=== Usando SMS ===");
const smsService = new SMSService();
const userServiceWithSMS = new UserServiceDIP(smsService);
userServiceWithSMS.registerUser("+5511999999999", "Maria Santos");

console.log("\n=== Usando Push Notification ===");
const pushService = new PushNotificationService();
const userServiceWithPush = new UserServiceDIP(pushService);
userServiceWithPush.registerUser("user123", "Pedro Costa");

console.log("\n=== Usando Mock para Testes ===");
const mockService = new MockNotificationService();
const userServiceForTest = new UserServiceDIP(mockService);
userServiceForTest.registerUser("test@example.com", "Usu√°rio Teste");
console.log(`üìä Mensagens capturadas: ${mockService.sentMessages.length}`);

console.log("\n‚úÖ Vantagens:");
console.log("- UserService n√£o conhece implementa√ß√µes concretas");
console.log("- F√°cil de testar com mocks");
console.log("- F√°cil adicionar novos tipos de notifica√ß√£o");
console.log("- Baixo acoplamento entre classes");
